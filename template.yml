# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
    Start from scratch starter project

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

# Shared configuration for all resources, more in
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        # The PermissionsBoundary allows users to safely develop with their function's permissions constrained
        # to their current application. All the functions and roles in this application have to include it and
        # it has to be manually updated when you add resources to your application.
        # More information in https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html
        PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary'
        Environment:
            Variables:
                COGNITO_USER_POOL_ID: ap-northeast-1_8Uid6vspw
                COGNITO_CLIENT_ID: 7nd21b64rg9fllcu3u1d4ec3j0
                DB_HOST: kaigodb.cid2yoih2ulz.ap-northeast-1.rds.amazonaws.com
                DB_DATABASE: lambda
                DB_USER: admin
                DB_PASSWORD: bardow-5wudjy-Cucter


Parameters:
    AppId:
        Type: String
# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
    # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    userLoginLambdaFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./
            Handler: src/handlers/user-lambda.loginLambdaHandler
            Runtime: nodejs14.x
            MemorySize: 128
            Timeout: 60
            Description: user login.
            Policies:
                - AWSLambdaBasicExecutionRole
            Events:
                Api:
                    Type: Api
                    Properties:
                        Path: /family-login
                        Method: POST
    staffLoginLambdaFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./
            Handler: src/handlers/user-lambda.loginLambdaHandler
            Runtime: nodejs14.x
            MemorySize: 128
            Timeout: 60
            Description: staff login.
            Policies:
                # Give Lambda basic execution Permission to the helloFromLambda
                - AWSLambdaBasicExecutionRole
            Events:
                Api:
                    Type: Api
                    Properties:
                        Path: /staff-login
                        Method: POST
    logoutLambdaFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./
            Handler: src/handlers/user-lambda.logoutLambdaHandler
            Runtime: nodejs14.x
            MemorySize: 128
            Timeout: 60
            Description: staff login.
            Policies:
                # Give Lambda basic execution Permission to the helloFromLambda
                - AWSLambdaBasicExecutionRole
            Events:
                Api:
                    Type: Api
                    Properties:
                        Path: /logout
                        Method: POST
    refreshTokenLambdaFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./
            Handler: src/handlers/user-lambda.refreshTokenLambdaHandler
            Runtime: nodejs14.x
            MemorySize: 128
            Timeout: 60
            Description: refresh token.
            Policies:
                # Give Lambda basic execution Permission to the helloFromLambda
                - AWSLambdaBasicExecutionRole
            Events:
                Api:
                    Type: Api
                    Properties:
                        Path: /refresh-token
                        Method: POST
    forgotPasswordLambdaFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./
            Handler: src/handlers/user-lambda.forgotPasswordLambdaHandler
            Runtime: nodejs14.x
            MemorySize: 128
            Timeout: 60
            Description: forgot password.
            Policies:
                # Give Lambda basic execution Permission to the helloFromLambda
                - AWSLambdaBasicExecutionRole
            Events:
                Api:
                    Type: Api
                    Properties:
                        Path: /forgot-password
                        Method: POST
    confirmPasswordLambdaFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./
            Handler: src/handlers/user-lambda.confirmPasswordLambdaHandler
            Runtime: nodejs14.x
            MemorySize: 128
            Timeout: 60
            Description: confirm password.
            Policies:
                # Give Lambda basic execution Permission to the helloFromLambda
                - AWSLambdaBasicExecutionRole
            Events:
                Api:
                    Type: Api
                    Properties:
                        Path: /confirm-password
                        Method: POST
